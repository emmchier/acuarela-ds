{"version":3,"file":"Input.stories-51b9e180.js","sources":["../../src/components/Input.tsx"],"sourcesContent":["import { ChangeEvent, useEffect, useState } from 'react';\n\nimport { getSize, getRadius, getVariant, getIconActionByState } from '../helpers';\nimport { InputProps } from '../interfaces';\n\nimport { CancelCircleIcon } from './Icon';\nimport Button from './Button';\n\nimport '../styles/globals.css';\nimport '../styles/theme.css';\nimport './input.css';\n\n/**\n * @module Input\n * @description A versatile input field component with various customization options.\n *\n * @typedef {Object} InputProps\n * @property {string} [type='text'] - The type of input ('text', 'password', 'email', etc.).\n * @property {string} [variant='outlined'] - The input field variant ('outlined', 'filled', etc.).\n * @property {string} [state='default'] - The state of the input ('default', 'error', 'success', 'warning').\n * @property {string} [name=''] - The name attribute for the input.\n * @property {Object} [ref] - A reference to the input element.\n * @property {string} [value] - The value of the input field.\n * @property {number} [minValue] - The minimum value for numeric inputs.\n * @property {number} [maxValue] - The maximum value for numeric inputs.\n * @property {string} [defaultValue] - The default value for the input.\n * @property {string} [placeholder] - The placeholder text.\n * @property {number} [maxLength] - The maximum number of characters allowed.\n * @property {number} [minLength] - The minimum number of characters required.\n * @property {string} [pattern] - A regular expression pattern for validation.\n * @property {string} [label=''] - The label for the input field.\n * @property {string} [labelClassName=''] - Additional class name for the label.\n * @property {number} [charCounterMin] - Minimum character count for a character counter.\n * @property {number} [charCounterMax] - Maximum character count for a character counter.\n * @property {string} [prefix=''] - Text to display before the input field.\n * @property {element} [action=null] - Additional action element to display after the input field.\n * @property {string} [helperText=''] - Helper text to provide additional information.\n * @property {string} [helperTextAlign='end'] - Alignment of the helper text ('start', 'center', 'end').\n * @property {string} [focusColor='primary'] - Color when the input is in focus.\n * @property {boolean} [hideLabel=false] - Whether to hide the label.\n * @property {boolean} [required=false] - Whether the input is required.\n * @property {boolean} [readOnly=false] - Whether the input is read-only.\n * @property {boolean} [autoFocus=false] - Whether the input should automatically focus.\n * @property {boolean} [resetButton=true] - Whether to display a reset button.\n * @property {boolean} [charCounter=false] - Whether to display a character counter.\n * @property {number} [tabIndex=0] - The tabindex of the input element.\n * @property {string} [ariaLabel=''] - Descriptive text for accessibility.\n * @property {number} [elevation=0] - Elevation level.\n * @property {string} [textColor=''] - Text color of the input field.\n * @property {string} [bgColor=''] - Background color of the input field.\n * @property {number} [borderSize] - Border size of the input field.\n * @property {string} [size='md'] - Size of the input ('sm', 'md', 'lg').\n * @property {string} [borderColor=''] - Border color of the input field.\n * @property {string} [borderRadius='sm'] - Border radius of the input field.\n * @property {string} [className=''] - Additional CSS classes for the input component.\n * @property {Object} [style] - Additional inline CSS styles for the input component.\n * @property {boolean} [disabled=false] - Whether the input is disabled.\n * @property {string} [ariaLabelAction=''] - Descriptive text for the action element.\n * @property {function} [onClick=() => {}] - Event handler for input click.\n * @property {function} [onMouseEnter=() => {}] - Event handler for mouse enter.\n * @property {function} [onMouseLeave=() => {}] - Event handler for mouse leave.\n * @property {function} [onKeyDown=() => {}] - Event handler for key down.\n * @property {function} [onKeyUp=() => {}] - Event handler for key up.\n * @property {function} [onChange=() => {}] - Event handler for input value change.\n * @property {function} [onSubmit=() => {}] - Event handler for form submission.\n * @property {function} [onFocus=() => {}] - Event handler for input focus.\n * @property {function} [onBlur=() => {}] - Event handler for input blur.\n * @property {function} [onClickAction] - Event handler for action element click.\n *\n * @example\n * // Example usage:\n * import { Input } from 'your-input-component-package';\n *\n * const MyForm = () => {\n *   return (\n *     <Input\n *       type=\"text\"\n *       label=\"Username\"\n *       placeholder=\"Enter your username\"\n *       onChange={(e) => console.log(e.target.value)}\n *     />\n *   );\n * }\n *\n * @see [Link to full documentation](https://github.com/emmchier/acuarela-ds)\n */\n\nexport const Input = ({\n  type = 'text',\n  variant = 'outlined',\n  state = 'default',\n  name = '',\n  ref,\n  value,\n  minValue,\n  maxValue,\n  defaultValue,\n  placeholder,\n  maxLength,\n  minLength,\n  pattern,\n  label = '',\n  labelClassName = '',\n  charCounterMin,\n  charCounterMax,\n  prefix = '',\n  action = null,\n  helperText = '',\n  helperTextAlign = 'end',\n  focusColor = 'primary',\n  hideLabel = false,\n  required = false,\n  readOnly = false,\n  autoFocus = false,\n  resetButton = true,\n  charCounter = false,\n  tabIndex = 0,\n  ariaLabel = '',\n  elevation = 0,\n  textColor = '',\n  bgColor = '',\n  borderSize,\n  size = 'md',\n  borderColor = '',\n  borderRadius = 'sm',\n  className = '',\n  style: additionalStyles,\n  disabled = false,\n  ariaLabelAction = '',\n  onClick = () => {},\n  onMouseEnter = () => {},\n  onMouseLeave = () => {},\n  onKeyDown = () => {},\n  onKeyUp = () => {},\n  onChange = () => {},\n  onSubmit = () => {},\n  onFocus = () => {},\n  onBlur = () => {},\n  onClickAction = undefined,\n}: InputProps) => {\n  const [localValue, setLocalValue] = useState(value || '');\n\n  // Efecto para actualizar el valor local cuando cambian las props externas\n  useEffect(() => {\n    setLocalValue(localValue as string); // Puedes establecer otro valor predeterminado si lo deseas\n  }, [localValue]);\n\n  useEffect(() => {\n    setLocalValue(value || ''); // Actualiza \"localValue\" cuando cambia \"value\"\n  }, [value]);\n\n  // Función para manejar el cambio interno\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setLocalValue(e.target.value);\n  };\n\n  // Función para borrar el input\n  const handleClearInput = () => {\n    setLocalValue('');\n  };\n\n  const classes = () => {\n    return [\n      className,\n      'acInput',\n      getSize(size),\n      getRadius(borderRadius),\n      getVariant(variant),\n      state ? state : '',\n      elevation ? `elevation${elevation}` : '',\n      disabled ? 'disabled' : '',\n      resetButton || action || state ? 'adjustRightPadding' : '',\n      prefix ? 'adjustLeftPadding' : '',\n    ]\n      .filter(Boolean)\n      .join(' ');\n  };\n\n  const inlineStyles = {\n    color: textColor,\n    backgroundColor: bgColor,\n    border: `${borderSize}px solid ${borderColor}`,\n    ...additionalStyles,\n  };\n\n  return (\n    <div className=\"inputGroup\">\n      <label\n        htmlFor={name}\n        className={`inputFieldLabel ${labelClassName} ${\n          hideLabel && 'hideLabel'\n        } ${state} ${getSize(size)} ${getRadius(borderRadius)}`}\n      >\n        {label}\n      </label>\n      <div className={`inputField ${getSize(size)}`}>\n        <input\n          type={type}\n          ref={ref}\n          id={name}\n          name={name}\n          defaultValue={defaultValue}\n          placeholder={placeholder}\n          maxLength={maxLength}\n          minLength={minLength}\n          pattern={pattern}\n          min={minValue}\n          max={maxValue}\n          required={required}\n          readOnly={readOnly}\n          autoFocus={autoFocus}\n          autoComplete=\"off\"\n          tabIndex={tabIndex}\n          className={classes()}\n          style={inlineStyles}\n          aria-label={ariaLabel}\n          aria-disabled={disabled ? 'true' : 'false'}\n          value={localValue}\n          onChange={(e) => {\n            handleInputChange(e);\n            onChange(e);\n          }}\n          onSubmit={onSubmit}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          onClick={onClick}\n          onKeyDown={onKeyDown}\n          onKeyUp={onKeyUp}\n          onMouseEnter={onMouseEnter}\n          onMouseLeave={onMouseLeave}\n        />\n        <div className=\"prefix\">{prefix}</div>\n        <div className=\"actions\">\n          {resetButton ? (\n            localValue && (\n              <Button\n                onClick={handleClearInput}\n                className=\"resetBtn\"\n                ariaLabel={localValue ? 'Reset value' : ''}\n                variant=\"ghost\"\n                borderRadius=\"full\"\n                size=\"xs\"\n                iconButton\n              >\n                <CancelCircleIcon size=\"xs\" />\n              </Button>\n            )\n          ) : (\n            <Button\n              onClick={onClickAction}\n              className={`inputAction ${\n                action && typeof onClickAction === 'function' && onClickAction !== undefined\n                  ? ''\n                  : 'disableAction'\n              }`}\n              ariaLabel={ariaLabelAction}\n              variant={\n                action && typeof onClickAction === 'function' && onClickAction !== undefined\n                  ? 'ghost'\n                  : 'none'\n              }\n              borderRadius=\"full\"\n              size=\"xs\"\n              iconButton\n            >\n              {action ? action : getIconActionByState(state)}\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n"],"names":["Input","type","variant","state","name","ref","value","minValue","maxValue","defaultValue","placeholder","maxLength","minLength","pattern","label","labelClassName","charCounterMin","charCounterMax","prefix","action","helperText","helperTextAlign","focusColor","hideLabel","required","readOnly","autoFocus","resetButton","charCounter","tabIndex","ariaLabel","elevation","textColor","bgColor","borderSize","size","borderColor","borderRadius","className","additionalStyles","disabled","ariaLabelAction","onClick","onMouseEnter","onMouseLeave","onKeyDown","onKeyUp","onChange","onSubmit","onFocus","onBlur","onClickAction","localValue","setLocalValue","useState","useEffect","handleInputChange","e","handleClearInput","classes","getSize","getRadius","getVariant","inlineStyles","jsxs","jsx","Button","CancelCircleIcon","getIconActionByState"],"mappings":"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"}